/**
 * SCILL API
 * SCILL gives you the tools to activate, retain and grow your user base in your app or game by bringing you features well known in the gaming industry: Gamification. We take care of the services and technology involved so you can focus on your game and content.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@scillgame.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#pragma once

#include "ScillApiBaseModel.h"

namespace ScillSDK
{

/*
 * ScillApiEventMetaData
 *
 * This holds metadata and is specific to each event type. Please have a look at the documentation to learn which properties need to be set for the event-type you want to send.
 */
class SCILLSDK_API ScillApiEventMetaData : public Model
{
public:
    virtual ~ScillApiEventMetaData() {}
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;
	void WriteJson(JsonWriter& Writer) const final;

	/* The object that is the source of the action */
	TOptional<FString> ActionObject;
	/* The object that is the target of the action */
	TOptional<FString> ActionSubject;
	/* The name of the action */
	TOptional<FString> ActionType;
	/* Number of ammonition used */
	TOptional<int32> AmmoUsed;
	/* A general indicator for number of items (i.e. number of kills in kill-enemy event) */
	TOptional<int32> Amount;
	/* The number of ammonition gained */
	TOptional<int32> AmountGained;
	/* The number of amminition given */
	TOptional<int32> AmountGiven;
	/* The name of an animal */
	TOptional<FString> AnimalName;
	/* The \"health\" state of the armor */
	TOptional<int32> Armor;
	/* The id of the opponent team */
	TOptional<FString> AwayTeamId;
	/* The score of the opponent team */
	TOptional<int32> AwayScore;
	/* An integer value indicating the battle status (map it to an enum for example in your code) */
	TOptional<int32> BattleStatus;
	/* The name of the bounty */
	TOptional<FString> BountyName;
	/* The id or name of a building */
	TOptional<FString> BuildingId;
	/* The level of the building */
	TOptional<int32> BuildingLevel;
	/* The name of the card */
	TOptional<FString> CardType;
	/* The name of a character */
	TOptional<FString> CharacterName;
	/* The id/name of a checkpint */
	TOptional<FString> CheckpointId;
	/* The x coordinate in your coordinate system, used for example to store position on a map */
	TOptional<int32> CoordinateX;
	/* The y coordinate in your coordinate system, used for example to store position on a map */
	TOptional<int32> CoordinateY;
	/* The name of a crew */
	TOptional<FString> CrewName;
	/* The amount of damage */
	TOptional<int32> DamageAmount;
	/* The distance measured in any coordinate system of your choice. Please note: This is an integer field. If you need more precision multiple your floating point value with 1000 or so to keep the precision but storing it as an integer value */
	TOptional<int32> Distance;
	/* The duration in any unit you like */
	TOptional<int32> Duration;
	/* The effect id or name */
	TOptional<FString> EffectId;
	/* The character type or name of an enemy */
	TOptional<FString> EnemyCharacter;
	/* The type of an enemy */
	TOptional<FString> EnemyType;
	/* The event type */
	TOptional<FString> EventType;
	/* The number of fuel consumed */
	TOptional<int32> FuelConsumed;
	/* The health */
	TOptional<int32> Health;
	/* The type of a hit (i.e. head, torso, leg) */
	TOptional<FString> HitType;
	/* The id or name of your or the home team */
	TOptional<FString> HomeTeamId;
	/* The score of your or the home team */
	TOptional<int32> HomeScore;
	/* The id of an item */
	TOptional<FString> ItemId;
	/* The name of an item */
	TOptional<FString> ItemName;
	/* The type of an item */
	TOptional<FString> ItemType;
	/* The type of a kill */
	TOptional<FString> KillType;
	/* The position in a lap */
	TOptional<int32> LapPosition;
	/* The id of the level */
	TOptional<FString> LevelId;
	/* The name of a map */
	TOptional<FString> MapName;
	/* The name of a section of a map */
	TOptional<FString> MapSectionName;
	/* The mission id */
	TOptional<FString> MissionId;
	/* The name of the player character */
	TOptional<FString> PlayerCharacter;
	/* The id of a puzzle */
	TOptional<int32> PuzzleId;
	/* The position within a race */
	TOptional<int32> RacePosition;
	/* The realm */
	TOptional<FString> Realm;
	/* The time required involed in this event. I.e. in a reach-checkpoint event this could be the time in seconds required to reach that checkpoint from the last checkpoint. */
	TOptional<int32> RequiredTime;
	/* The name/id of the resource gained */
	TOptional<FString> ResourceGained;
	/* The name/id of the resource given (to someone else) */
	TOptional<FString> ResourceGiven;
	/* The name of the resource */
	TOptional<FString> ResourceName;
	/* The id of the round */
	TOptional<int32> RoundId;
	/* The type of the round */
	TOptional<FString> RoundType;
	/* The score */
	TOptional<int32> Score;
	/* The type of the stats item */
	TOptional<FString> StatType;
	/* The timing condition */
	TOptional<FString> TimeCondition;
	/* The id of the transport */
	TOptional<FString> TransportId;
	/* The name/id of a type */
	TOptional<FString> Type;
	/* The name/id of a unit type */
	TOptional<FString> UnitType;
	/* The name of the upgrade */
	TOptional<FString> UpgradeType;
	/* The action taken on a weapon (i.e. infrared-activated) */
	TOptional<FString> WeaponAction;
	/* The id of the weapon */
	TOptional<FString> WeaponId;
	/* The type of the weapon */
	TOptional<FString> WeaponType;
	/* The name/id of a weapon used in a kill or similar event */
	TOptional<FString> WeaponUsed;
	/* The name of the zone */
	TOptional<FString> ZoneName;
};

}
