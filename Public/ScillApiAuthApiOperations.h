/**
 * SCILL API
 * SCILL gives you the tools to activate, retain and grow your user base in your app or game by bringing you features well known in the gaming industry: Gamification. We take care of the services and technology involved so you can focus on your game and content.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@scillgame.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#pragma once

#include "ScillApiBaseModel.h"
#include "ScillApiAuthApi.h"

#include "ScillApiAccessToken.h"
#include "ScillApiError.h"
#include "ScillApiForeignUserIdentifier.h"
#include "ScillApiNotificationTopic.h"
#include "ScillApiUserInfo.h"

namespace ScillSDK
{

/* Get an access token for any user identifier signed with the API-Key

*/
class SCILLSDK_API ScillApiAuthApi::GenerateAccessTokenRequest : public Request
{
public:
    virtual ~GenerateAccessTokenRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* Foreign user identifier. */
	ScillApiForeignUserIdentifier ScillApiForeignUserIdentifier;
};

class SCILLSDK_API ScillApiAuthApi::GenerateAccessTokenResponse : public Response
{
public:
    virtual ~GenerateAccessTokenResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    ScillApiAccessToken Content;
};

/* Get MQTT topic for leaderboard
 *
 * Get a topic to be used with an MQTT client to receive real time updates whenever the specified leaderboard changes.
*/
class SCILLSDK_API ScillApiAuthApi::GetLeaderboardNotificationTopicRequest : public Request
{
public:
    virtual ~GetLeaderboardNotificationTopicRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* The id of the leaderboard you want to get notified */
	FString LeaderboardId;
};

class SCILLSDK_API ScillApiAuthApi::GetLeaderboardNotificationTopicResponse : public Response
{
public:
    virtual ~GetLeaderboardNotificationTopicResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    ScillApiNotificationTopic Content;
};

/* Get a topic to be used with an MQTT client to receive real time updates whenever a battle pass or challenges and levels within the battle pass change
 *
 * Get a topic to be used with an MQTT client to receive real time updates whenever a battle pass changes.
*/
class SCILLSDK_API ScillApiAuthApi::GetUserBattlePassNotificationTopicRequest : public Request
{
public:
    virtual ~GetUserBattlePassNotificationTopicRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* The battle pass you want to get notified */
	FString BattlePassId;
};

class SCILLSDK_API ScillApiAuthApi::GetUserBattlePassNotificationTopicResponse : public Response
{
public:
    virtual ~GetUserBattlePassNotificationTopicResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    ScillApiNotificationTopic Content;
};

/* Get a topic to be used with an MQTT client to receive real time updates whenever the specified challenge changes.
 *
 * Get a topic to be used with an MQTT client to receive real time updates whenever the challenge changes.
*/
class SCILLSDK_API ScillApiAuthApi::GetUserChallengeNotificationTopicRequest : public Request
{
public:
    virtual ~GetUserChallengeNotificationTopicRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* The challenge id you want to get notified */
	FString ChallengeId;
};

class SCILLSDK_API ScillApiAuthApi::GetUserChallengeNotificationTopicResponse : public Response
{
public:
    virtual ~GetUserChallengeNotificationTopicResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    ScillApiNotificationTopic Content;
};

/* Get a topic to be used with an MQTT client to receive real time updates whenever challenges for the user provided by the access token changes.
 *
 * Get a topic to be used with an MQTT client to receive real time updates whenever challenges for the user provided by the access token change.
*/
class SCILLSDK_API ScillApiAuthApi::GetUserChallengesNotificationTopicRequest : public Request
{
public:
    virtual ~GetUserChallengesNotificationTopicRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

};

class SCILLSDK_API ScillApiAuthApi::GetUserChallengesNotificationTopicResponse : public Response
{
public:
    virtual ~GetUserChallengesNotificationTopicResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    ScillApiNotificationTopic Content;
};

/* Get additional info stored per user
 *
 * Returns additional info object with usernames and avatar image for a user which is used in the leaderboard system
*/
class SCILLSDK_API ScillApiAuthApi::GetUserInfoRequest : public Request
{
public:
    virtual ~GetUserInfoRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

};

class SCILLSDK_API ScillApiAuthApi::GetUserInfoResponse : public Response
{
public:
    virtual ~GetUserInfoResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    ScillApiUserInfo Content;
};

/* Set additional info stored per user
 *
 * Sets user info like username and avatar image which is returned as part of the user rankings in leaderboards.
*/
class SCILLSDK_API ScillApiAuthApi::SetUserInfoRequest : public Request
{
public:
    virtual ~SetUserInfoRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* UserInfo object stored in the SCILL database for the user */
	ScillApiUserInfo ScillApiUserInfo;
};

class SCILLSDK_API ScillApiAuthApi::SetUserInfoResponse : public Response
{
public:
    virtual ~SetUserInfoResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    ScillApiUserInfo Content;
};

}
