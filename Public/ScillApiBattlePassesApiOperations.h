/**
 * SCILL API
 * SCILL gives you the tools to activate, retain and grow your user base in your app or game by bringing you features well known in the gaming industry: Gamification. We take care of the services and technology involved so you can focus on your game and content.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@scillgame.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#pragma once

#include "ScillApiBaseModel.h"
#include "ScillApiBattlePassesApi.h"

#include "ScillApiActionResponse.h"
#include "ScillApiBattlePass.h"
#include "ScillApiBattlePassLevel.h"
#include "ScillApiBattlePassUnlockInfo.h"
#include "ScillApiBattlePassUnlockPayload.h"
#include "ScillApiError.h"

namespace ScillSDK
{

/* Activate a given battle pass level by id
 *
 * Activate a given battle pass level by id
*/
class SCILLSDK_API ScillApiBattlePassesApi::ActivateBattlePassLevelRequest : public Request
{
public:
    virtual ~ActivateBattlePassLevelRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* The app id */
	FString AppId;
	/* The id of the battle pass level. */
	FString LevelId;
	/* Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... */
	TOptional<FString> Language;
};

class SCILLSDK_API ScillApiBattlePassesApi::ActivateBattlePassLevelResponse : public Response
{
public:
    virtual ~ActivateBattlePassLevelResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    ScillApiActionResponse Content;
};

/* Claim the battle pass level reward. This will trigger a Webhook that you can use to unlock the reward on server side. If you don&#39;t have a server you can also unlock in the client application after receiving a positive response.
 *
 * Claim the battle pass level id
*/
class SCILLSDK_API ScillApiBattlePassesApi::ClaimBattlePassLevelRewardRequest : public Request
{
public:
    virtual ~ClaimBattlePassLevelRewardRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* The app id */
	FString AppId;
	/* The id of the battle pass level. */
	FString LevelId;
	/* Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... */
	TOptional<FString> Language;
};

class SCILLSDK_API ScillApiBattlePassesApi::ClaimBattlePassLevelRewardResponse : public Response
{
public:
    virtual ~ClaimBattlePassLevelRewardResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    ScillApiActionResponse Content;
};

/* Get battle passes
 *
 * Get active battle passes for the app
*/
class SCILLSDK_API ScillApiBattlePassesApi::GetActiveBattlePassesRequest : public Request
{
public:
    virtual ~GetActiveBattlePassesRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* The app id */
	FString AppId;
	/* Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... */
	TOptional<FString> Language;
};

class SCILLSDK_API ScillApiBattlePassesApi::GetActiveBattlePassesResponse : public Response
{
public:
    virtual ~GetActiveBattlePassesResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    TArray<ScillApiBattlePass> Content;
};

/* Get battle pass levels for an app (from all battle passes)
 *
 * Get all battle pass levels for an app
*/
class SCILLSDK_API ScillApiBattlePassesApi::GetAllBattlePassLevelsRequest : public Request
{
public:
    virtual ~GetAllBattlePassLevelsRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* The app id */
	FString AppId;
	/* Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... */
	TOptional<FString> Language;
};

class SCILLSDK_API ScillApiBattlePassesApi::GetAllBattlePassLevelsResponse : public Response
{
public:
    virtual ~GetAllBattlePassLevelsResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    TArray<ScillApiBattlePassLevel> Content;
};

/* Get battle pass by id
 *
 * Get battle pass for the product with id
*/
class SCILLSDK_API ScillApiBattlePassesApi::GetBattlePassRequest : public Request
{
public:
    virtual ~GetBattlePassRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* The app id */
	FString AppId;
	/* The id of the battle pass. It’s the same as in battle_pass_id you received in earlier requests (i.e. getting all active battle passes for a product). */
	FString BattlePassId;
	/* Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... */
	TOptional<FString> Language;
};

class SCILLSDK_API ScillApiBattlePassesApi::GetBattlePassResponse : public Response
{
public:
    virtual ~GetBattlePassResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    ScillApiBattlePass Content;
};

/* Get battle pass levels for a battle pass
 *
 * Get battle pass levels for a battle pass
*/
class SCILLSDK_API ScillApiBattlePassesApi::GetBattlePassLevelsRequest : public Request
{
public:
    virtual ~GetBattlePassLevelsRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* The app id */
	FString AppId;
	/* The id of the battle pass. It’s the same as in battle_pass_id you received in earlier requests (i.e. getting all active battle passes for a product). */
	FString BattlePassId;
	/* Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... */
	TOptional<FString> Language;
};

class SCILLSDK_API ScillApiBattlePassesApi::GetBattlePassLevelsResponse : public Response
{
public:
    virtual ~GetBattlePassLevelsResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    TArray<ScillApiBattlePassLevel> Content;
};

/* Get battle passes
 *
 * Get battle passes for the product
*/
class SCILLSDK_API ScillApiBattlePassesApi::GetBattlePassesRequest : public Request
{
public:
    virtual ~GetBattlePassesRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* The app id */
	FString AppId;
	/* Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... */
	TOptional<FString> Language;
};

class SCILLSDK_API ScillApiBattlePassesApi::GetBattlePassesResponse : public Response
{
public:
    virtual ~GetBattlePassesResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    TArray<ScillApiBattlePass> Content;
};

/* Get battle passes unlocked by the user
 *
 * Get unlocked battle passes for the user encoded in the access token
*/
class SCILLSDK_API ScillApiBattlePassesApi::GetUnlockedBattlePassesRequest : public Request
{
public:
    virtual ~GetUnlockedBattlePassesRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* The app id */
	FString AppId;
	/* Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... */
	TOptional<FString> Language;
};

class SCILLSDK_API ScillApiBattlePassesApi::GetUnlockedBattlePassesResponse : public Response
{
public:
    virtual ~GetUnlockedBattlePassesResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    TArray<ScillApiBattlePass> Content;
};

/* Unlock the battle pass for the user specified in the access token
 *
 * Unlock the battle pass for a user
*/
class SCILLSDK_API ScillApiBattlePassesApi::UnlockBattlePassRequest : public Request
{
public:
    virtual ~UnlockBattlePassRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* The app id */
	FString AppId;
	/* The id of the battle pass. It’s the same as in battle_pass_id you received in earlier requests (i.e. getting all active battle passes for a product). */
	FString BattlePassId;
	/* Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... */
	TOptional<FString> Language;
	/* Provide purchase info for the battle pass */
	TOptional<ScillApiBattlePassUnlockPayload> ScillApiBattlePassUnlockPayload;
};

class SCILLSDK_API ScillApiBattlePassesApi::UnlockBattlePassResponse : public Response
{
public:
    virtual ~UnlockBattlePassResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    ScillApiBattlePassUnlockInfo Content;
};

}
