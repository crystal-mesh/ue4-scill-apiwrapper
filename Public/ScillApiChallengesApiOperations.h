/**
 * SCILL API
 * SCILL gives you the tools to activate, retain and grow your user base in your app or game by bringing you features well known in the gaming industry: Gamification. We take care of the services and technology involved so you can focus on your game and content.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@scillgame.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#pragma once

#include "ScillApiBaseModel.h"
#include "ScillApiChallengesApi.h"

#include "ScillApiActionResponse.h"
#include "ScillApiChallenge.h"
#include "ScillApiChallengeCategory.h"
#include "ScillApiError.h"
#include "ScillApiSocketToken.h"

namespace ScillSDK
{

/* Activate a personal challenges
 *
 * Activate a personal challenge by product id and user challenge id
*/
class SCILLSDK_API ScillApiChallengesApi::ActivatePersonalChallengeRequest : public Request
{
public:
    virtual ~ActivatePersonalChallengeRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* The app id */
	FString AppId;
	/* The challenge id (see challenge_id of Challenge object) */
	FString ChallengeId;
	/* Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... */
	TOptional<FString> Language;
};

class SCILLSDK_API ScillApiChallengesApi::ActivatePersonalChallengeResponse : public Response
{
public:
    virtual ~ActivatePersonalChallengeResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    ScillApiActionResponse Content;
};

/* Cancel an active personal challenges
 *
 * Cancel an active personal challenge by product id and user challenge id
*/
class SCILLSDK_API ScillApiChallengesApi::CancelPersonalChallengeRequest : public Request
{
public:
    virtual ~CancelPersonalChallengeRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* The app id */
	FString AppId;
	/* The challenge id (see challenge_id of Challenge object) */
	FString ChallengeId;
	/* Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... */
	TOptional<FString> Language;
};

class SCILLSDK_API ScillApiChallengesApi::CancelPersonalChallengeResponse : public Response
{
public:
    virtual ~CancelPersonalChallengeResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    ScillApiActionResponse Content;
};

/* Claim the reward of a finished personal challenge
 *
 * Claim the reward of a finished personal challenge by product id and user challenge id
*/
class SCILLSDK_API ScillApiChallengesApi::ClaimPersonalChallengeRewardRequest : public Request
{
public:
    virtual ~ClaimPersonalChallengeRewardRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* The app id */
	FString AppId;
	/* The challenge id (see challenge_id of Challenge object) */
	FString ChallengeId;
	/* Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... */
	TOptional<FString> Language;
};

class SCILLSDK_API ScillApiChallengesApi::ClaimPersonalChallengeRewardResponse : public Response
{
public:
    virtual ~ClaimPersonalChallengeRewardResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    ScillApiActionResponse Content;
};

/* Get an access token for the Websockets server notifying of updates in real time
 *
 * Get an access token for the Websockets server notifying of updates in real time
*/
class SCILLSDK_API ScillApiChallengesApi::GenerateWebsocketAccessTokenRequest : public Request
{
public:
    virtual ~GenerateWebsocketAccessTokenRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

};

class SCILLSDK_API ScillApiChallengesApi::GenerateWebsocketAccessTokenResponse : public Response
{
public:
    virtual ~GenerateWebsocketAccessTokenResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    ScillApiSocketToken Content;
};

/* Get active personal challenges
 *
 * Get active personal challenges organized in categories
*/
class SCILLSDK_API ScillApiChallengesApi::GetActivePersonalChallengesRequest : public Request
{
public:
    virtual ~GetActivePersonalChallengesRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* The app id */
	FString AppId;
	/* Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... */
	TOptional<FString> Language;
};

class SCILLSDK_API ScillApiChallengesApi::GetActivePersonalChallengesResponse : public Response
{
public:
    virtual ~GetActivePersonalChallengesResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    TArray<ScillApiChallengeCategory> Content;
};

/* Get all personal challenges available for your app. Also includes completed challenges.
 *
 * Get personal challenges organized in categories that are not yet finished
*/
class SCILLSDK_API ScillApiChallengesApi::GetAllPersonalChallengesRequest : public Request
{
public:
    virtual ~GetAllPersonalChallengesRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* The app id */
	FString AppId;
	/* A list of categories that should be included in the response. Only the categories provided will be returned */
	TOptional<TArray<FString>> IncludeCategories;
	/* A list of categories that should be excluded from the response. All  categories except those listed here will be returned */
	TOptional<TArray<FString>> ExcludeCategories;
	/* Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... */
	TOptional<FString> Language;
};

class SCILLSDK_API ScillApiChallengesApi::GetAllPersonalChallengesResponse : public Response
{
public:
    virtual ~GetAllPersonalChallengesResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    TArray<ScillApiChallengeCategory> Content;
};

/* Get personal challenge by id
 *
 * Get personal challenges organized in categories
*/
class SCILLSDK_API ScillApiChallengesApi::GetPersonalChallengeByIdRequest : public Request
{
public:
    virtual ~GetPersonalChallengeByIdRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* The app id */
	FString AppId;
	/* The challenge id (see challenge_id of Challenge object) */
	FString ChallengeId;
	/* Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... */
	TOptional<FString> Language;
};

class SCILLSDK_API ScillApiChallengesApi::GetPersonalChallengeByIdResponse : public Response
{
public:
    virtual ~GetPersonalChallengeByIdResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    ScillApiChallenge Content;
};

/* Get personal challenges that are not yet completed.
 *
 * Get personal challenges organized in categories
*/
class SCILLSDK_API ScillApiChallengesApi::GetPersonalChallengesRequest : public Request
{
public:
    virtual ~GetPersonalChallengesRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* The app id */
	FString AppId;
	/* A list of categories that should be included in the response. Only the categories provided will be returned */
	TOptional<TArray<FString>> IncludeCategories;
	/* A list of categories that should be excluded from the response. All  categories except those listed here will be returned */
	TOptional<TArray<FString>> ExcludeCategories;
	/* Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... */
	TOptional<FString> Language;
};

class SCILLSDK_API ScillApiChallengesApi::GetPersonalChallengesResponse : public Response
{
public:
    virtual ~GetPersonalChallengesResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    TArray<ScillApiChallengeCategory> Content;
};

/* Get personal challenges that are not yet completed.
 *
 * Get personal challenges organized in categories that are not yet finished
*/
class SCILLSDK_API ScillApiChallengesApi::GetUnresolvedPersonalChallengesRequest : public Request
{
public:
    virtual ~GetUnresolvedPersonalChallengesRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* The app id */
	FString AppId;
	/* A list of categories that should be included in the response. Only the categories provided will be returned */
	TOptional<TArray<FString>> IncludeCategories;
	/* A list of categories that should be excluded from the response. All  categories except those listed here will be returned */
	TOptional<TArray<FString>> ExcludeCategories;
	/* Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... */
	TOptional<FString> Language;
};

class SCILLSDK_API ScillApiChallengesApi::GetUnresolvedPersonalChallengesResponse : public Response
{
public:
    virtual ~GetUnresolvedPersonalChallengesResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    TArray<ScillApiChallengeCategory> Content;
};

/* Resets all challenges for the given app ID and user ID
 *
 * Resets all challenges for the given app ID and user ID
*/
class SCILLSDK_API ScillApiChallengesApi::ResetUserAppChallengesRequest : public Request
{
public:
    virtual ~ResetUserAppChallengesRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* The app id */
	FString AppId;
	/* The user id ( */
	FString UserId;
};

class SCILLSDK_API ScillApiChallengesApi::ResetUserAppChallengesResponse : public Response
{
public:
    virtual ~ResetUserAppChallengesResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    ScillApiActionResponse Content;
};

/* Unlock a personal challenges
 *
 * Unlock a personal challenge by product id and challenge id
*/
class SCILLSDK_API ScillApiChallengesApi::UnlockPersonalChallengeRequest : public Request
{
public:
    virtual ~UnlockPersonalChallengeRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* The app id */
	FString AppId;
	/* The challenge id (see challenge_id of Challenge object) */
	FString ChallengeId;
	/* Set the language. Content can be translated in the Admin Panel. Values can be international language codes like de, en, fr, it, ... */
	TOptional<FString> Language;
};

class SCILLSDK_API ScillApiChallengesApi::UnlockPersonalChallengeResponse : public Response
{
public:
    virtual ~UnlockPersonalChallengeResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    ScillApiActionResponse Content;
};

}
