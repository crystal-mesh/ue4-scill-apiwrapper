/**
 * SCILL API
 * SCILL gives you the tools to activate, retain and grow your user base in your app or game by bringing you features well known in the gaming industry: Gamification. We take care of the services and technology involved so you can focus on your game and content.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@scillgame.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#pragma once

#include "CoreMinimal.h"
#include "ScillApiBaseModel.h"

namespace ScillSDK
{

class SCILLSDK_API ScillApiChallengesApi
{
public:
	ScillApiChallengesApi();
	~ScillApiChallengesApi();

	/* Sets the URL Endpoint.
	* Note: several fallback endpoints can be configured in request retry policies, see Request::SetShouldRetry */
	void SetURL(const FString& Url);

	/* Adds global header params to all requests */
	void AddHeaderParam(const FString& Key, const FString& Value);
	void ClearHeaderParams();

	/* Sets the retry manager to the user-defined retry manager. User must manage the lifetime of the retry manager.
	* If no retry manager is specified and a request needs retries, a default retry manager will be used.
	* See also: Request::SetShouldRetry */
	void SetHttpRetryManager(FHttpRetrySystem::FManager& RetryManager);
	FHttpRetrySystem::FManager& GetHttpRetryManager();

	class ActivatePersonalChallengeRequest;
	class ActivatePersonalChallengeResponse;
	class CancelPersonalChallengeRequest;
	class CancelPersonalChallengeResponse;
	class ClaimPersonalChallengeRewardRequest;
	class ClaimPersonalChallengeRewardResponse;
	class GenerateWebsocketAccessTokenRequest;
	class GenerateWebsocketAccessTokenResponse;
	class GetActivePersonalChallengesRequest;
	class GetActivePersonalChallengesResponse;
	class GetAllPersonalChallengesRequest;
	class GetAllPersonalChallengesResponse;
	class GetPersonalChallengeByIdRequest;
	class GetPersonalChallengeByIdResponse;
	class GetPersonalChallengesRequest;
	class GetPersonalChallengesResponse;
	class GetUnresolvedPersonalChallengesRequest;
	class GetUnresolvedPersonalChallengesResponse;
	class ResetUserAppChallengesRequest;
	class ResetUserAppChallengesResponse;
	class UnlockPersonalChallengeRequest;
	class UnlockPersonalChallengeResponse;
	
    DECLARE_DELEGATE_OneParam(FActivatePersonalChallengeDelegate, const ActivatePersonalChallengeResponse&);
    DECLARE_DELEGATE_OneParam(FCancelPersonalChallengeDelegate, const CancelPersonalChallengeResponse&);
    DECLARE_DELEGATE_OneParam(FClaimPersonalChallengeRewardDelegate, const ClaimPersonalChallengeRewardResponse&);
    DECLARE_DELEGATE_OneParam(FGenerateWebsocketAccessTokenDelegate, const GenerateWebsocketAccessTokenResponse&);
    DECLARE_DELEGATE_OneParam(FGetActivePersonalChallengesDelegate, const GetActivePersonalChallengesResponse&);
    DECLARE_DELEGATE_OneParam(FGetAllPersonalChallengesDelegate, const GetAllPersonalChallengesResponse&);
    DECLARE_DELEGATE_OneParam(FGetPersonalChallengeByIdDelegate, const GetPersonalChallengeByIdResponse&);
    DECLARE_DELEGATE_OneParam(FGetPersonalChallengesDelegate, const GetPersonalChallengesResponse&);
    DECLARE_DELEGATE_OneParam(FGetUnresolvedPersonalChallengesDelegate, const GetUnresolvedPersonalChallengesResponse&);
    DECLARE_DELEGATE_OneParam(FResetUserAppChallengesDelegate, const ResetUserAppChallengesResponse&);
    DECLARE_DELEGATE_OneParam(FUnlockPersonalChallengeDelegate, const UnlockPersonalChallengeResponse&);
    
    FHttpRequestPtr ActivatePersonalChallenge(const ActivatePersonalChallengeRequest& Request, const FActivatePersonalChallengeDelegate& Delegate = FActivatePersonalChallengeDelegate()) const;
    FHttpRequestPtr CancelPersonalChallenge(const CancelPersonalChallengeRequest& Request, const FCancelPersonalChallengeDelegate& Delegate = FCancelPersonalChallengeDelegate()) const;
    FHttpRequestPtr ClaimPersonalChallengeReward(const ClaimPersonalChallengeRewardRequest& Request, const FClaimPersonalChallengeRewardDelegate& Delegate = FClaimPersonalChallengeRewardDelegate()) const;
    FHttpRequestPtr GenerateWebsocketAccessToken(const GenerateWebsocketAccessTokenRequest& Request, const FGenerateWebsocketAccessTokenDelegate& Delegate = FGenerateWebsocketAccessTokenDelegate()) const;
    FHttpRequestPtr GetActivePersonalChallenges(const GetActivePersonalChallengesRequest& Request, const FGetActivePersonalChallengesDelegate& Delegate = FGetActivePersonalChallengesDelegate()) const;
    FHttpRequestPtr GetAllPersonalChallenges(const GetAllPersonalChallengesRequest& Request, const FGetAllPersonalChallengesDelegate& Delegate = FGetAllPersonalChallengesDelegate()) const;
    FHttpRequestPtr GetPersonalChallengeById(const GetPersonalChallengeByIdRequest& Request, const FGetPersonalChallengeByIdDelegate& Delegate = FGetPersonalChallengeByIdDelegate()) const;
    FHttpRequestPtr GetPersonalChallenges(const GetPersonalChallengesRequest& Request, const FGetPersonalChallengesDelegate& Delegate = FGetPersonalChallengesDelegate()) const;
    FHttpRequestPtr GetUnresolvedPersonalChallenges(const GetUnresolvedPersonalChallengesRequest& Request, const FGetUnresolvedPersonalChallengesDelegate& Delegate = FGetUnresolvedPersonalChallengesDelegate()) const;
    FHttpRequestPtr ResetUserAppChallenges(const ResetUserAppChallengesRequest& Request, const FResetUserAppChallengesDelegate& Delegate = FResetUserAppChallengesDelegate()) const;
    FHttpRequestPtr UnlockPersonalChallenge(const UnlockPersonalChallengeRequest& Request, const FUnlockPersonalChallengeDelegate& Delegate = FUnlockPersonalChallengeDelegate()) const;
    
private:
    void OnActivatePersonalChallengeResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FActivatePersonalChallengeDelegate Delegate) const;
    void OnCancelPersonalChallengeResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FCancelPersonalChallengeDelegate Delegate) const;
    void OnClaimPersonalChallengeRewardResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FClaimPersonalChallengeRewardDelegate Delegate) const;
    void OnGenerateWebsocketAccessTokenResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGenerateWebsocketAccessTokenDelegate Delegate) const;
    void OnGetActivePersonalChallengesResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetActivePersonalChallengesDelegate Delegate) const;
    void OnGetAllPersonalChallengesResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetAllPersonalChallengesDelegate Delegate) const;
    void OnGetPersonalChallengeByIdResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetPersonalChallengeByIdDelegate Delegate) const;
    void OnGetPersonalChallengesResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetPersonalChallengesDelegate Delegate) const;
    void OnGetUnresolvedPersonalChallengesResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FGetUnresolvedPersonalChallengesDelegate Delegate) const;
    void OnResetUserAppChallengesResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FResetUserAppChallengesDelegate Delegate) const;
    void OnUnlockPersonalChallengeResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FUnlockPersonalChallengeDelegate Delegate) const;
    
	FHttpRequestRef CreateHttpRequest(const Request& Request) const;
	bool IsValid() const;
	void HandleResponse(FHttpResponsePtr HttpResponse, bool bSucceeded, Response& InOutResponse) const;

	FString Url;
	TMap<FString,FString> AdditionalHeaderParams;
	mutable FHttpRetrySystem::FManager* RetryManager = nullptr;
	mutable TUniquePtr<HttpRetryManager> DefaultRetryManager;
};

}
