/**
 * SCILL API
 * SCILL gives you the tools to activate, retain and grow your user base in your app or game by bringing you features well known in the gaming industry: Gamification. We take care of the services and technology involved so you can focus on your game and content.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@scillgame.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "ScillApiWrapper/ScillApiBattlePassLevelReward.h"

#include "ScillSDKModule.h"
#include "ScillApiWrapper/ScillApiHelpers.h"

#include "Templates/SharedPointer.h"

namespace ScillSDK
{

void ScillApiBattlePassLevelReward::WriteJson(JsonWriter& Writer) const
{
	Writer->WriteObjectStart();
	if (AppId.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("app_id")); WriteJsonValue(Writer, AppId.GetValue());
	}
	if (BattlePassId.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("battle_pass_id")); WriteJsonValue(Writer, BattlePassId.GetValue());
	}
	if (LevelId.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("level_id")); WriteJsonValue(Writer, LevelId.GetValue());
	}
	if (UserId.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("user_id")); WriteJsonValue(Writer, UserId.GetValue());
	}
	if (LevelPositionIndex.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("level_position_index")); WriteJsonValue(Writer, LevelPositionIndex.GetValue());
	}
	if (RewardAmount.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("reward_amount")); WriteJsonValue(Writer, RewardAmount.GetValue());
	}
	if (RewardTypeName.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("reward_type_name")); WriteJsonValue(Writer, RewardTypeName.GetValue());
	}
	Writer->WriteObjectEnd();
}

bool ScillApiBattlePassLevelReward::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	ParseSuccess &= TryGetJsonValue(*Object, TEXT("app_id"), AppId);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("battle_pass_id"), BattlePassId);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("level_id"), LevelId);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("user_id"), UserId);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("level_position_index"), LevelPositionIndex);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("reward_amount"), RewardAmount);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("reward_type_name"), RewardTypeName);

	return ParseSuccess;
}

}
